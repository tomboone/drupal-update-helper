#!/bin/bash

################################################################################
# Drupal Multisite Module Status Check (Updated for Modern Drush/Composer)
#
# Checks for security vulnerabilities, general updates, and lists
# Composer-managed Drupal modules that are not enabled on any site within a
# specified Drush alias group.
#
# Requirements:
# 1. Run from the Drupal project root directory (where composer.json is).
# 2. `jq` command-line JSON processor must be installed.
# 3. A Drush alias group must be configured for your multisite setup in your
#    Drush configuration (e.g., in `drush/sites/updates.site.yml`). This script
#    uses the alias group name defined by the environment variable
#    `DRUSH_MULTISITE_GROUP_ALIAS`, defaulting to '@updates'.
#
# Usage:
# ./check_modules.sh
# DRUSH_MULTISITE_GROUP_ALIAS='@my_multisite_group' ./check_modules.sh
#
# Note: This script now uses 'composer audit' for security checks and
# 'composer outdated' for update checks, reflecting modern Drupal practices.
#
################################################################################

echo "############################################"
echo "### Drupal Module Status Check ###"
echo "############################################"
CURRENT_DATE=$(date +"%Y-%m-%d %H:%M:%S")
echo "Check run on: $CURRENT_DATE"
echo

# --- Configuration ---
# Use project's Drush binary explicitly
DRUSH_CMD="vendor/bin/drush"
# Use environment variable for alias group, default to @updates
DRUSH_ALIAS_GROUP=${DRUSH_MULTISITE_GROUP_ALIAS:-@updates}

# Check if Drush command exists
if [ ! -x "$DRUSH_CMD" ]; then
  echo "Error: Drush command not found or not executable at $DRUSH_CMD"
  echo "Ensure you are in the Drupal project root and ran 'composer install'."
  exit 1
fi

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo "Error: jq command-line JSON processor is not installed. Please install jq."
    exit 1
fi

echo "Using Drush command: $DRUSH_CMD"
echo "Targeting Drush alias group: $DRUSH_ALIAS_GROUP (Set DRUSH_MULTISITE_GROUP_ALIAS to override)"
echo

# --- Security Audit ---
echo "--- Checking Security Vulnerabilities (composer audit) ---"
# composer audit returns non-zero exit code if vulnerabilities are found.
# We capture the output and check the exit code separately.
audit_output=$(composer audit 2>&1)
audit_exit_code=$?
echo "$audit_output"
if [ $audit_exit_code -ne 0 ]; then
 echo "Warning: 'composer audit' reported issues (exit code $audit_exit_code)."
fi
echo

# --- Available Updates (Minor/Major) ---
echo "--- Checking Available Updates (composer outdated 'drupal/*') ---"
echo "(Review versions below to identify Minor vs Major updates)"
if ! composer outdated 'drupal/*'; then
  echo "Warning: Error occurred while checking for outdated Drupal packages."
fi
echo

# --- Unused Composer Modules ---
echo "--- Checking for Composer Modules Not Enabled Anywhere in '$DRUSH_ALIAS_GROUP' ---"

# Define temp files
composer_modules_file=$(mktemp)
enabled_modules_file=$(mktemp)
# Ensure cleanup on exit
trap 'rm -f "$composer_modules_file" "$enabled_modules_file"' EXIT

# Get Composer modules (installed, non-dev, drupal/*)
echo "Getting installed Drupal modules from composer..."
# List installed, non-dev packages, filter for drupal/, remove prefix, sort.
if ! composer show --installed --no-dev --name-only | grep '^drupal/' | sed 's/^drupal\///' | sort > "$composer_modules_file"; then
    echo "Error: Failed to get installed Drupal modules via composer."
    # Optionally continue if you want other checks to run
else
    module_count=$(wc -l < "$composer_modules_file" | tr -d ' ') # Get count, remove whitespace
    echo "Found $module_count installed non-dev contrib/custom modules via composer."
fi

# Get Enabled modules across all sites in the specified alias group
echo "Getting enabled modules from all sites in '$DRUSH_ALIAS_GROUP' via Drush..."
# Important: Ensure the alias group '$DRUSH_ALIAS_GROUP' is correctly defined in your Drush config!
# Adding --pipe flag for simpler output format
if ! "$DRUSH_CMD" "$DRUSH_ALIAS_GROUP" pm:list --status=enabled --type=module --no-core --fields=name --format=pipe | sort | uniq > "$enabled_modules_file"; then
    echo "Warning: Failed to get enabled modules via Drush alias group '$DRUSH_ALIAS_GROUP'."
    echo "Check Drush alias configuration and site status for all sites in the group."
    # Decide if you want to exit or continue cautiously
else
   enabled_count=$(wc -l < "$enabled_modules_file" | tr -d ' ') # Get count, remove whitespace
   echo "Found $enabled_count unique enabled contrib/custom modules across sites in '$DRUSH_ALIAS_GROUP'."
fi


# Compare lists if both files were created successfully and composer file is not empty
if [ -f "$composer_modules_file" ] && [ -s "$composer_modules_file" ] && [ -f "$enabled_modules_file" ]; then
  echo "Comparing lists..."
  # comm requires non-empty files for comparison in some versions
  # Check if enabled_modules file is empty first
  if [ ! -s "$enabled_modules_file" ]; then
      echo "Result: No enabled contrib/custom modules found via Drush. All composer modules are considered 'unused':"
      echo "---"
      cat "$composer_modules_file"
      echo "---"
  else
      unused_modules=$(comm -23 "$composer_modules_file" "$enabled_modules_file")

      if [ -z "$unused_modules" ]; then
          echo "Result: All detected composer drupal-modules (non-dev) appear to be enabled on at least one site in '$DRUSH_ALIAS_GROUP'."
      else
          echo "Result: Modules installed via composer (non-dev) but NOT enabled on any site in '$DRUSH_ALIAS_GROUP':"
          echo "---"
          echo "$unused_modules"
          echo "---"
      fi
  fi
elif [ -f "$composer_modules_file" ] && [ ! -s "$composer_modules_file" ]; then
    echo "Result: No installed non-dev Drupal modules found via composer to compare."
else
  echo "Warning: Could not perform comparison due to errors fetching one or both module lists."
fi

echo
echo "############################################"
echo "### Check Complete ###"
echo "############################################"

exit 0
